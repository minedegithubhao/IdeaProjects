<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/mvc 
	    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	    http://www.springframework.org/schema/context 
	    http://www.springframework.org/schema/context/spring-context.xsd
	    http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- 启用Spring MVC的注解驱动功能，用于启用@RequestMapping（请求映射）、@RequestParam（数据绑定）@PathVariable（数据绑定）、@Valid（数据校验）等注解的处理 -->
	<mvc:annotation-driven  conversion-service="conversionService" validator="validator"/>

	<!-- 主要负责组件扫描，用于启用@Controller、@Service、@Repository等注解的类的自动注册 -->
	<context:component-scan base-package="com.megagao.production.ssm.controller" />
    
	<!-- 视图解析器，这段配置的作用是将Controller方法返回的视图名转换为具体的JSP文件路径，使得Spring MVC能够正确地定位并渲染对应的JSP视图，
	将JSP文件放置在WEB-INF目录下可以增加安全性，因为这样的JSP文件不能被直接访问，只能通过Controller来间接访问。-->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 开启aop，对类代理 -->
	<aop:config proxy-target-class="true"></aop:config>

	<!--静态资源（例如CSS、JavaScript、图片等文件）通常存放在Web应用的特定目录下，而不是由Spring MVC框架处理。使用<mvc:default-servlet-handler/>配置，
	可以确保这些静态资源的请求被正确地处理，而不会被Spring MVC的DispatcherServlet拦截。-->
	<mvc:default-servlet-handler/>

	<!-- 配置静态资源的映射，使得指定目录下的静态资源能够被访问。例如，/WEB-INF/css/目录下的CSS文件可以通过/css/**路径访问 -->
	<mvc:resources location="/WEB-INF/css/" mapping="/css/**"/>
	<mvc:resources location="/WEB-INF/js/" mapping="/js/**"/> 
	<mvc:resources location="/WEB-INF/image/" mapping="/image/**"/> 
	
	<!-- 定义文件上传解析器，用于处理文件上传。设置了默认编码和最大文件上传大小。 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设定默认编码 -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- 设定文件上传的最大值20MB，20*1024*1024 -->
		<property name="maxUploadSize" value="20971520"></property>
	</bean>
	
	<!-- 定义统一异常处理器，用于处理应用中的异常情况 -->
	<bean class="com.megagao.production.ssm.exception.CustomExceptionResolver"></bean>
	
	<!-- 配置转换器，用于将请求参数转换为Controller方法的参数类型。这里定义了自定义的转换器 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="com.megagao.production.ssm.controller.converter.CustomDateConverter"/>
				<bean class="com.megagao.production.ssm.controller.converter.StringTrimConverter"/>
			</set>
		</property>
	</bean>
	
	<!-- 配置校验器，用于进行数据校验。这里使用了Hibernate Validator作为底层的校验提供者 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<!-- 配置校验错误信息的资源文件，用于国际化校验错误信息。指定了资源文件名、编码格式和缓存时间。 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>CustomValidationMessages.properties</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>
</beans>